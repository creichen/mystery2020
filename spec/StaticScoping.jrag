import java.util.HashSet;
import java.util.LinkedList;
import mystery2020.NameException;
import mystery2020.runtime.VariableVector;

aspect StaticScoping {
    // ========================================
    // Variable name propagation and collection

    /**
     * Example:
     *   VarDecl x
     *   TypeDecl ...
     *   VarDecl y
     * will give
     *   [0, -1, 1]
     */
    int[]
    Block.variableStorageIndexVector() {
	int[] vec = new int[this.getNumDecl()];
	int next_var_index = 0;
	for (int i = 0; i < this.getNumDecl(); i++) {
	    if (this.getDecl(i).isVariable()) {
		vec[i] = next_var_index++;
	    } else {
		vec[i] = -1;
	    }
	}
	return vec;
    }

    // ========================================
    // Name errors

    coll LinkedList<NameException> Program.nameErrors();

    Block contributes (new NameException(line(), "Ambiguous variable name: " + firstAmbiguousName()))
	when firstAmbiguousName() != null
	to Program.nameErrors();

    ProcDecl contributes (new NameException(line(), "Ambiguous formal parameter name: " + firstAmbiguousName()))
	when firstAmbiguousName() != null
	to Program.nameErrors();

    ID contributes (new NameException(line(), "Name not found: " + getName()))
	when staticDeclaration() == null
	to Program.nameErrors();

    static String
    Block.findAmbiguousParameterName(AbstractBlock block) {
	HashSet<String> names = new HashSet<>();
	for (Decl decl : block.getDecls()) {
	    String name = decl.name();
	    // FIXME: for now, everything always uses the same namespace
	    if (names.contains(name)) {
		return name;
	    }
	    names.add(name);
	}
	return null;
    }

    syn String ProcDecl.firstAmbiguousName() = Block.findAmbiguousParameterName(this);
    syn String Block.firstAmbiguousName() = Block.findAmbiguousParameterName(this);

    // ========================================
    // Vardecls and their immediate owners

    interface AbstractBlock {
	/**
	 * Whether this block represents a function argument list
	 */
	public boolean isArgs();

	public List<? extends Decl> getDecls();

	// /**
	//  * How deeply nested is this block (starting at 0)?
	//  */
	// public int staticNestingDepth();
    }
    ProcDecl implements AbstractBlock;
    Block implements AbstractBlock;

    public boolean ProcDecl.isArgs() { return true; }
    public boolean Block.isArgs() { return false; }

    syn int ProcDecl.getVariablesNr() {
	return this.getNumDecl();
    }
    syn int Block.getVariablesNr() {
	int[] args = variableStorageIndexVector();
	for (int i = args.length - 1; i >= 0; --i) {
	    if (args[i] >= 0) {
		return args[i] + 1;
	    }
	}
	return 0;
    }


    inh int Decl.index();
    eq ProcDecl.getDecl(int index).index() = index;
    eq Block.getDecl(int index).index() = index;
    eq Call.getActual(int index).index() = index;

    inh int AbstractBlock.staticNestingDepthCounter();
    eq Program.getBody().staticNestingDepthCounter() = 0;
    eq ProcDecl.getBody().staticNestingDepthCounter() = staticNestingDepthCounter() + 2;
    eq Block.getStmt(int index).staticNestingDepthCounter() = staticNestingDepthCounter() + 1;

    syn int AbstractBlock.staticNestingDepth();
    eq Block.staticNestingDepth() = staticNestingDepthCounter();
    eq ProcDecl.staticNestingDepth() = staticNestingDepthCounter() + 1;

    inh int VarDecl.accessDepth();
    eq ProcDecl.getDecl().accessDepth() = staticNestingDepth();
    eq Block.getDecl().accessDepth() = staticNestingDepth();

    inh int VarDecl.accessIndex();
    eq Block.getDecl(int index).accessIndex() = variableStorageIndexVector()[index];
    eq ProcDecl.getDecl(int index).accessIndex() = index;

    // ========================================
    // Abstract variable vectors (used for stack initialisation)

    syn VariableVector AbstractBlock.variableVector(Runtime rt) {
	Variable[] vars = new Variable[this.getVariablesNr()];

	int index = 0;

	for (Decl decl : this.getDecls()) {
	    if (decl.isVariable()) {
		VarDecl vdecl = (VarDecl) decl;
		Variable v = new Variable(vdecl.getMType(rt), vdecl.getName());
		vars[index++] = v;
	    }
	}
	return new VariableVector(vars);
    }

    // ========================================
    // Looking up Name Uses

    interface Named {
	public String name();
    }
    Decl implements Named;

    syn String Decl.name();
    eq VarDecl.name() = getName();
    eq TypeDecl.name() = getName();
    eq ProcDecl.name() = getName();

    syn Decl ID.staticDeclaration() {
	return lookupStatic(this.getName());
    }

    syn Decl NamedType.staticDeclaration() {
    	return lookupStatic(this.getName());
    }

    inh Decl AbstractBlock.lookupStatic(String name);
    inh Decl ID.lookupStatic(String name);
    inh Decl NamedType.lookupStatic(String name);

    eq Program.getBody().lookupStatic(String name) {
	return null;
    }

    eq ProcDecl.getBody().lookupStatic(String name) {
    	for (VarDecl decl : this.getDecls()) {
    	    if (decl.name().equals(name)) {
		return decl;
	    }
    	}
    	return lookupStatic(name);
    }

    Decl Block.localLookupStatic(String name) {
    	for (Decl decl : this.getDecls()) {
	    // FIXME: once we support multiple scopes, separate by type
    	    if (decl.name().equals(name)) {
		return decl;
	    }
    	}
    	return lookupStatic(name);
    }

    eq Block.getStmt().lookupStatic(String name) { return localLookupStatic(name); }
    eq Block.getDecl().lookupStatic(String name) { return localLookupStatic(name); }
}
