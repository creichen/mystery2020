import beaver.Symbol;
import mystery2020.IntLiteralException;
import mystery2020.MType;
import mystery2020.DynamicTypeError;
import mystery2020.runtime.Runtime;
import mystery2020.runtime.VariableVector;

/**
 * Expression evaluation
 */
aspect Eval {

    public interface EvalInterface {
	Value eval(Runtime rt);
    }

    // ========================================
    // Declaration to value conversion
    Decl implements EvalInterface;

    public Value
    VarDecl.eval(Runtime rt) {
	return this.variable(rt).getValue();
    }

    public Value
    TypeDecl.eval(Runtime rt) {
	throw new mystery2020.InvalidVariableKindException(line(), "Trying to use type as a value: " + this.getName());
    }

    public Value
    ProcDecl.eval(Runtime rt) {
	return new Value(getMType(rt),
			 new Closure(this, rt.getStack().copyTruncated(this.staticNestingDepth())));
    }

    // ========================================
    // Expression evaluation
    Expr implements EvalInterface;

    public Value
    BinOpSequence.eval(Runtime rt) {
	throw new RuntimeException("Not supported; should have been rewritten");
    }

    public Value
    Number.eval(Runtime rt) {
	try {
	    Value v = new Value(MType.UR_INTEGER, Integer.parseInt(this.getNumber()));
	    return v;
	} catch (NumberFormatException exn) {
	    throw new IntLiteralException(line(),
					  Symbol.getColumn(this.getStart()),
					  this.getNumber());
	}
    }

    public Value
    ID.eval(Runtime rt) {
	return rt.getDeclaration(this).eval(rt);
    }

    public Value
    Subscription.eval(Runtime rt) {
	return this.variable(rt).getValue();
    }

    public Value
    Call.eval(Runtime rt) {
	rt.runCall(this);
	Value v = this.getCallee().eval(rt);
	VariableVector actuals = rt.prepareCallArguments(this.getActuals());
	if (dyncheck()) {
	    MType.ProcedureType callee_type = v.getType().getProcedureType(this);
	    if (callee_type.getArgs().length != actuals.size()) {
		throw new DynamicTypeError(line(), "Wrong number of arguments for call: have " + actuals.size() + " but expected " + callee_type.getArgs().length);
	    }
	    for (int i = 0; i < actuals.size(); i++) {
		callee_type.getArgs()[i].ensureCanAssignFrom(this, actuals.get(i).getType());
	    }
	}
	return v.call(rt, line(), actuals);
    }

    public Value
    UnitValue.eval(Runtime rt) {
	// No idea why anyone has a reason to call this
	return Value.NOTHING;
    }

    // ========================================
    // Binary operator evaluation
    public class BinArguments {
	private Value lhs_value = null;
	private Value rhs_value = null;
	private EvalInterface lhs;
	private EvalInterface rhs;
	private Expr lhs_node, rhs_node;
	ASTNode origin;

	public BinArguments(ASTNode origin, Expr lhs_node, Expr rhs_node) {
	    // we carry the nodes over for error reporting
	    this.origin = origin;
	    this.lhs_node = lhs_node;
	    this.rhs_node = rhs_node;
	    this.lhs = lhs_node;
	    this.rhs = rhs_node;
	}

	public Expr
	getLHSNode() {
	    return this.lhs_node;
	}

	public Expr
	getRHSNode() {
	    return this.rhs_node;
	}

	/**
	 * Evaluate arguments in the correct order
	 */
	public void
	prepare(Runtime rt) {
	    this.origin.config().operand_evaluation_order.get().prepare(this, rt);
	}

	public void
	evalLeft(Runtime rt) {
	    if (this.lhs_value == null) {
		this.lhs_value = this.lhs.eval(rt);
		this.lhs = null;
	    }
	}

	public void
	evalRight(Runtime rt) {
	    if (this.rhs_value == null) {
		this.rhs_value = this.rhs.eval(rt);
		this.rhs = null;
	    }
	}

	public Value
	getLHS(Runtime rt) {
	    this.evalLeft(rt);
	    return this.lhs_value;
	}

	public Value
	getRHS(Runtime rt) {
	    this.evalRight(rt);
	    return this.rhs_value;
	}
    }
    interface BinEvalInterface {
	Value bin_eval(BinArguments args, Runtime rt);
    }
    Operator implements BinEvalInterface;


    public Value
    BinOp.eval(Runtime rt) {
	Value result = this.getOperator().bin_eval(new BinArguments(this,
								    this.getLHS(),
								    this.getRHS()),
						   rt);
	return result;
    }

    public Value
    AddOp.bin_eval(BinArguments args, Runtime rt) {
	args.prepare(rt);
	Value lhs = args.getLHS(rt);
	Value rhs = args.getRHS(rt);
	MType ty = MType.UR_INTEGER;
	if (dyncheck()) {
	    MType.ANY_INTEGER.ensureCanAssignFrom(args.getLHSNode(), lhs.getType());
	    MType.ANY_INTEGER.ensureCanAssignFrom(args.getRHSNode(), rhs.getType());
	    ty = ((MType.IntegerType)lhs.getType()).plusMerge(((MType.IntegerType)rhs.getType()), config());
	    if (ty == null) {
		throw new DynamicTypeError(args.getLHSNode().line(), "Incompatible types for addition: " + lhs.getType() + " and " + rhs.getType());
	    }
	}
	long lhs_v = lhs.getInt(line());
	long rhs_v = rhs.getInt(line());
	long result = lhs_v + rhs_v;
	int result_int = (int) result;
	if (result != result_int) {
	    // FIXME: optional error handling
	}
	return new Value(ty, result_int);
    }

    public Value
    GTOp.bin_eval(BinArguments args, Runtime rt) {
	args.prepare(rt);
	MType.ANY_INTEGER.ensureCanAssignFrom(args.getLHSNode(), args.getLHS(rt).getType());
	MType.ANY_INTEGER.ensureCanAssignFrom(args.getRHSNode(), args.getRHS(rt).getType());
	int lhs_v = args.getLHS(rt).getInt(line());
	int rhs_v = args.getRHS(rt).getInt(line());
	if (lhs_v > rhs_v) {
	    return True();
	}
	return False();
    }

    public Value
    EqOp.bin_eval(BinArguments args, Runtime rt) {
	args.prepare(rt);
	Value lhs = args.getLHS(rt);
	if (lhs.equalTo(args.getRHS(rt), config())) {
	    return True();
	}
	return False();

    }

    public Value
    AndOp.bin_eval(BinArguments args, Runtime rt) {
	this.config().short_circuit_evaluation.get().preprocessArgs(args, rt);

	Value first = this.config().operand_evaluation_order.get().getValue(args, rt, true);
	// FIXME: dynamic type checking does not factor in operand eval order
	MType.ANY_INTEGER.ensureCanAssignFrom(args.getLHSNode(), first.getType());
	int first_v = first.getInt(line());

	if (0 != first_v) {
	    Value second = this.config().operand_evaluation_order.get().getValue(args, rt, false);
	    MType.ANY_INTEGER.ensureCanAssignFrom(args.getLHSNode(), second.getType());
	    int second_v = second.getInt(line());

	    if (0 != second_v) {
		return True();
	    }
	} else if (!this.config().short_circuit_evaluation.get().isShortCircuit()) {
	    // may still have do short-circuit dynamic type checking!
	    Value second = this.config().operand_evaluation_order.get().getValue(args, rt, false);
	    MType.ANY_INTEGER.ensureCanAssignFrom(args.getLHSNode(), second.getType());
	}

	return False();
    }
}
