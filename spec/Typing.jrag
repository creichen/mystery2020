import mystery2020.MType;
import mystery2020.MinMax;
import mystery2020.InvalidSubrangeException;
import mystery2020.runtime.Runtime;

/**
 * General type assignment (independent of specific typing schemes)
 */
aspect Typing {

    syn MinMax Subrange.getMinMax() {
	return new MinMax(line(), Symbol.getColumn(this.getStart()),
			  MType.parseInt(line(), column(), this.getLower()),
			  MType.parseInt(line(), column(), this.getUpper()));
    }

    Subrange contributes (new InvalidSubrangeException(line(), "Invalid subrange"))
	when getMinMax().getMin() > getMinMax().getMax()
	to Program.generalStaticErrors();

    syn MType Type.getMType(Runtime rt);

    eq UnknownType.getMType(Runtime rt) = MType.ANY;
    eq IntType.getMType(Runtime rt) = MType.INTEGER;
    eq SubrangeType.getMType(Runtime rt) = MType.SUBRANGE(getSubrange().getMinMax());
    eq ArrayType.getMType(Runtime rt) { return MType.ARRAY(getSubrange().getMinMax(), getElementType().getMType(rt)); }
    eq NamedType.getMType(Runtime rt) { return rt.getDeclaration(this).getDeclaredType(rt); }
    eq UnitType.getMType(Runtime rt) = MType.UNIT;
    eq ProcType.getMType(Runtime rt) {
	MType[] args = new MType[this.getNumFormal()];
	MType ret = this.getType().getMType(rt);
	for (int i = 0; i < this.getNumFormal(); ++i) {
	    args[i] = this.getFormal(i).getMType(rt);
	}
	return MType.PROCEDURE(args, ret);
    }

    syn MType VarDecl.getMType(Runtime rt);
    eq VarDecl.getMType(Runtime rt) = getType().getMType(rt);

    syn MType ProcDecl.getMType(Runtime rt);
    eq ProcDecl.getMType(Runtime rt) {
	MType[] args = new MType[this.getNumDecl()];
	MType ret = this.getType().getMType(rt);
	for (int i = 0; i < this.getNumDecl(); ++i) {
	    args[i] = this.getDecl(i).getMType(rt);
	}
	return MType.PROCEDURE(args, ret).makeUrType();
    }

    // ========================================
    // Type lookup

    public interface TypeLookupInterface {
	MType getDeclaredType(Runtime rt);
    }

    Decl implements TypeLookupInterface;

    public MType
    VarDecl.getDeclaredType(Runtime rt) {
	throw new mystery2020.InvalidVariableKindException(line(), "Trying to use value as type: " + this.getName());
    }

    public MType
    TypeDecl.getDeclaredType(Runtime rt) {
	return this.config().type_names_TYPE.get().nameType(this.getName(), this.getType().getMType(rt));
    }

    public MType
    ProcDecl.getDeclaredType(Runtime rt) {
	throw new mystery2020.InvalidVariableKindException(line(), "Trying to use value as type: " + this.getName());
    }
}
