import mystery2020.Configuration;
import mystery2020.InvalidSubrangeException;
import mystery2020.MType;
import mystery2020.MinMax;
import mystery2020.MysteryLimitException;
import mystery2020.RecursiveTypeException;
import mystery2020.UnknownTypeException;
import mystery2020.runtime.Runtime;

/**
 * General type assignment (independent of specific typing schemes)
 */
aspect Typing {

    syn MinMax Subrange.getMinMax() {
	return new MinMax(line(), Symbol.getColumn(this.getStart()),
			  MType.parseInt(line(), column(), this.getLower()),
			  MType.parseInt(line(), column(), this.getUpper()));
    }

    Subrange contributes (new InvalidSubrangeException(line(), "Invalid subrange"))
	when getMinMax().getMin() > getMinMax().getMax()
	to Program.generalStaticErrors();

    syn MType Type.getMType(Runtime rt);

    eq UnknownType.getMType(Runtime rt) = MType.INTEGER;
    eq IntType.getMType(Runtime rt) = MType.INTEGER;
    eq SubrangeType.getMType(Runtime rt) = MType.SUBRANGE(getSubrange().getMinMax());
    eq ArrayType.getMType(Runtime rt) {
	if (this.getElementType().dependsOn(rt, this)) {
	    throw new RecursiveTypeException(this.line(), "Array type depends on itself");
	}
	return MType.ARRAY(getSubrange().getMinMax(), getElementType().getMType(rt));
    }
    // ArrayType contributes (new MysteryLimitException(line(), "Array too large"))
    // 	when getSubrange().getMinMax().size() > Configuration.ARRAY_SIZE_LIMIT
    // 	to Program.generalStaticErrors();

    eq NamedType.getMType(Runtime rt) {
	if (rt.getDeclaration(this) == null) {
	    throw new UnknownTypeException(this.line(), "Unknown type: " + this.getName());
	}
	return rt.getDeclaration(this).getDeclaredType(rt);
    }
    eq UnitType.getMType(Runtime rt) = MType.UNIT;
    eq ProcType.getMType(Runtime rt) {
	MType[] args = new MType[this.getNumFormal()];
	MType ret = this.getType().getMType(rt);
	for (int i = 0; i < this.getNumFormal(); ++i) {
	    args[i] = this.getFormal(i).getMType(rt);
	}
	return MType.PROCEDURE(args, ret);
    }

    syn MType VarDecl.getMType(Runtime rt);
    eq VarDecl.getMType(Runtime rt) = getType().getMType(rt);

    syn MType ProcDecl.getMType(Runtime rt);
    eq ProcDecl.getMType(Runtime rt) {
	MType[] args = new MType[this.getNumDecl()];
	MType ret = this.getType().getMType(rt);
	for (int i = 0; i < this.getNumDecl(); ++i) {
	    args[i] = this.getDecl(i).getMType(rt);
	}
	return MType.PROCEDURE(args, ret).makeUrType();
    }

    // ========================================
    // Type dependency

    interface TypeDependsOn {
	public boolean dependsOn(Runtime rt, Type t);
    }

    Type implements TypeDependsOn;

    syn boolean Type.dependsOn(Runtime rt, Type t) circular [false];

    eq UnknownType.dependsOn(Runtime rt, Type t) = false;
    eq IntType.dependsOn(Runtime rt, Type t) = false;
    eq UnitType.dependsOn(Runtime rt, Type t) = false;
    eq SubrangeType.dependsOn(Runtime rt, Type t) = false;
    eq ArrayType.dependsOn(Runtime rt, Type t) {
	if (t == this) {
	    return true;
	}
	return this.getElementType().dependsOn(rt, t);
    }
    eq NamedType.dependsOn(Runtime rt, Type t) {
	if (t == this) {
	    return true;
	}
	return ((TypeDecl) rt.getDeclaration(this)).getType().dependsOn(rt, t);
    }
    eq ProcType.dependsOn(Runtime rt, Type t) {
	if (t == this) {
	    return true;
	}
	if (this.getType().dependsOn(rt, t)) {
	    return true;
	}
	for (VarDecl var : this.getFormals()) {
	    if (var.getType().dependsOn(rt, t)) {
		return true;
	    }
	}
	return false;
    }

    // ========================================
    // Type lookup

    public interface TypeLookupInterface {
	MType getDeclaredType(Runtime rt);
    }

    Decl implements TypeLookupInterface;

    public MType
    VarDecl.getDeclaredType(Runtime rt) {
	throw new mystery2020.InvalidVariableKindException(line(), "Trying to use value as type: " + this.getName());
    }

    private MType.NamedType TypeDecl.ty = null;
    public MType
    TypeDecl.getDeclaredType(Runtime rt) {
	if (this.ty != null) {
	    return this.ty;
	}
	this.ty = MType.NAMED(this.getName(), null);
	this.ty.setBody(this.getType().getMType(rt));
	//return this.config().type_names_TYPE.get().nameType(this.getName(), this.getType().getMType(rt));
        return ty;
    }

    public MType
    ProcDecl.getDeclaredType(Runtime rt) {
	throw new mystery2020.InvalidVariableKindException(line(), "Trying to use value as type: " + this.getName());
    }
}
