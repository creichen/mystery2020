import mystery2020.InvalidVariableKindException;
import mystery2020.runtime.*;
import mystery2020.runtime.Runtime;
import mystery2020.MType;

/**
 * Statement execution
 */
aspect Run {
    interface RunInterface {
	// returns non-null Value iff we hit a RETURN statement
	Value run(Runtime rt);
    }
    Stmt implements RunInterface;

    public void
    Program.run(Runtime rt) {
	if (this.staticErrors()) { // will throw exception
	    return;
	}
	// System.err.println("================================================================================");
	// System.err.println(this);
	this.getBody().run(rt);
    }

    Assignment contributes (new InvalidVariableKindException(line(), "Trying to assign to non-variable"))
	when !getLHS().isVariable()
	to Program.generalStaticErrors();

    public Value
    Assignment.run(Runtime rt) {
	rt.runStep(this);
	if (!this.getLHS().isVariable()) {
	    throw new InvalidVariableKindException(line(), "Trying to assign to non-variable");
	}

	this.getLHS().variable(rt).checkAndSetValue(this, this.getRHS().eval(rt));
	// System.err.println("# after assignment " + this + ":");
	// System.err.println(rt);
	return null;
    }

    public Value
    Return.run(Runtime rt) {
	rt.runStep(this);
	Value v = this.getExpr().eval(rt);
	if (dyncheck()) {
	    owningProcedure().getMType(rt).getProcedureType(this).getRet().ensureCanAssignFrom(this, v.getType());
	}
	owningProcedure().getMType(rt).getProcedureType(this).getRet().ensureValueIsAssignable(this, v);
	return v;
    }

    public Value
    Block.run(Runtime rt) {
	rt.runStep(this);
	rt.getStack().push(this.variableVector(rt).instantiate());

	/*
	System.err.println("ENTERING BLOCK with vars:");
	for (Decl decl : this.getDecls()) {
	    if (decl instanceof VarDecl) {
		VarDecl vd = (VarDecl) decl;
		System.err.println("  " + vd + " <" + vd.accessDepth() + ":" + vd.accessIndex() + ">");
	    }
	}
	System.err.println(":VV = " + this.variableVector());
	System.err.println("==>\n" + rt.getStack());
	*/

	for (Stmt stmt : this.getStmts()) {
	    Value retval = stmt.run(rt);
	    if (retval != null) {
		return retval;
	    }
	}
	rt.getStack().pop();
	return null;
    }

    public Value
    Conditional.run(Runtime rt) {
	rt.runStep(this);
	Value cond_val = this.getCond().eval(rt);
	MType.ANY_INTEGER.ensureCanAssignFrom(this, cond_val.getType());
	List<Stmt> statements;
	if (cond_val.getValue().equals(0)) {
	    statements = this.getFalseBranchStmts();
	} else {
	    statements =  this.getTrueBranchStmts();
	}
	for (Stmt stmt : statements) {
	    Value retval = stmt.run(rt);
	    if (retval != null) {
		return retval;
	    }
	}
	return null;
    }

    public Value
    While.run(Runtime rt) {
	//while (!this.getCond().eval(rt).getValue().equals(0)) {
	while (true) {
	    Value cond_val = this.getCond().eval(rt);
	    MType.ANY_INTEGER.ensureCanAssignFrom(this, cond_val.getType());

	    if (!cond_val.getValue().equals(0)) {
		rt.runStep(this);
		for (Stmt s : this.getStmts()) {
		    Value retval = s.run(rt);
		    if (retval != null) {
			return retval;
		    }
		}
	    } else {
		break;
	    }
	}
	return null;
    }

    public Value
    Output.run(Runtime rt) {
	rt.runStep(this);
	Value v = this.getExpr().eval(rt);
	if (v.getType().convertibleTo(MType.INTEGER, config())) {
	    rt.addOutput(v.getValue().toString());
	} else {
	    rt.addOutput("?");
	}
	return null;
    }

    public Value
    ExprStmt.run(Runtime rt) {
	rt.runStep(this);
	this.getExpr().eval(rt);
	// ignore result
	return null;
    }
}
