import mystery2020.InvalidVariableKindException;
import mystery2020.runtime.*;
import mystery2020.runtime.Runtime;
import mystery2020.MType;

/**
 * Statement execution
 */
aspect Run {
    interface RunInterface {
	// returns non-null Value iff we hit a RETURN statement
	Value run(Runtime rt);
    }
    Stmt implements RunInterface;

    public void
    Program.run(Runtime rt) {
	if (this.staticErrors()) { // will throw exception
	    return;
	}
	this.getBody().run(rt);
    }

    public Value
    Assignment.run(Runtime rt) {
	rt.runStep();
	if (!this.getLHS().isVariable()) {
	    throw new InvalidVariableKindException(line(), "Trying to assign to non-variable");
	}
	this.getLHS().variable(rt).setValue(this.getRHS().eval(rt));
	return null;
    }

    public Value
    Return.run(Runtime rt) {
	rt.runStep();
	return this.getExpr().eval(rt);
    }

    public Value
    Block.run(Runtime rt) {
	rt.runStep();
	rt.getStack().push(this.variableVector().instantiate());
	for (Stmt stmt : this.getStmts()) {
	    Value retval = stmt.run(rt);
	    if (retval != null) {
		return retval;
	    }
	}
	rt.getStack().pop();
	return null;
    }

    public Value
    Conditional.run(Runtime rt) {
	rt.runStep();
	Value cond_val = this.getCond().eval(rt);
	List<Stmt> statements;
	if (cond_val.getValue().equals(0)) {
	    statements = this.getFalseBranchStmts();
	} else {
	    statements =  this.getTrueBranchStmts();
	}
	for (Stmt stmt : statements) {
	    Value retval = stmt.run(rt);
	    if (retval != null) {
		return retval;
	    }
	}
	return null;
    }

    public Value
    While.run(Runtime rt) {
	rt.runStep();
	throw new RuntimeException("FIXME-3"); // !!!!!!!!!!!!!!!
    }

    public Value
    Output.run(Runtime rt) {
	rt.runStep();
	Value v = this.getExpr().eval(rt);
	if (v.getType().convertibleTo(MType.INTEGER, config())) {
	    rt.addOutput(v.getValue().toString());
	} else {
	    rt.addOutput("?");
	}
	return null;
    }

    public Value
    ExprStmt.run(Runtime rt) {
	rt.runStep();
	this.getExpr().eval(rt);
	// ignore result
	return null;
    }
}
