import mystery2020.runtime.*;
import mystery2020.runtime.Runtime;
import mystery2020.MType;

/**
 * Statement execution
 */
aspect Run {
    interface RunInterface {
	// returns non-null Value iff we hit a RETURN statement
	Value run(Runtime rt);
    }
    Stmt implements RunInterface;

    public void
    Program.run(Runtime rt) {
	this.getBlock().run(rt);
    }

    public Value
    Assignment.run(Runtime rt) {
	rt.runStep();
	throw new RuntimeException("FIXME"); // !!!!!!!!!!!!!!!
    }

    public Value
    Return.run(Runtime rt) {
	rt.runStep();
	return this.getExpr.eval(rt);
    }

    public Value
    Block.run(Runtime rt) {
	rt.runStep();
	for (Stmt stmt : this.getStmts()) {
	    Value retval = stmt.run(rt);
	    if (retval != null) {
		return retval;
	    }
	}
    }

    public Value
    Conditional.run(Runtime rt) {
	rt.runStep();
	throw new RuntimeException("FIXME"); // !!!!!!!!!!!!!!!
    }

    public Value
    While.run(Runtime rt) {
	rt.runStep();
	throw new RuntimeException("FIXME"); // !!!!!!!!!!!!!!!
    }

    public Value
    Output.run(Runtime rt) {
	rt.runStep();
	Value v = this.getExpr().eval(rt);
	if (v.getType().convertibleTo(MType.INTEGER)) {
	    rt.addOutput(v.getVale().toString());
	} else {
	    rt.addOutput("?");
	}
	throw new RuntimeException("FIXME"); // !!!!!!!!!!!!!!!
    }

    public Value
    ExprStmt.run(Runtime rt) {
	rt.runStep();
	this.getExpr().eval(rt);
	// ignore result
	return null;
    }
}
